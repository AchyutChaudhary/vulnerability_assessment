from flask import Flask, redirect, render_template, request
import subprocess
from libnmap.parser import NmapParser

# Configure application
app = Flask(__name__)

@app.route('/')
def index():
    #command = "nmap -sP 172.31.151.90/26;"
    #my_output = subprocess.check_output(command, shell=True).decode('utf-8')
    return render_template("index.html",title='Home')  

@app.route('/scan', methods=["GET","POST"])
def scan():
    if request.method=='POST':
        ip=request.form.get('ip_range')
        command='nmap -sP '+ip+' ;'
        myoutput=subprocess.check_output(command, shell=True).decode('utf-8')
        return render_template("result.html", my_output=myoutput)

    return render_template("scan.html",title='Scan')

previous_port=0
previous_host=0
@app.route('/scanresult/<int:var>', methods=["GET","POST"])
def scanresult(var):
    global previous_port 
    global previous_host
    #complete scan report
    nmap_report = NmapParser.parse_fromfile('intense-ping.xml')

    #unique products found in the scan
    products=sorted(set([ b.banner for a in nmap_report.hosts for b in a.services if 'product' in b.banner]))

    #unique ports found open on all the hosts combines
    ports=sorted(set([ b[0] for a in nmap_report.hosts for b in a.get_open_ports()]), key=int)

    #finding one active host to display initial data
    for first in nmap_report.hosts:
        if first.is_up():
            break

    #distinct devices types
    devices= set() #intilazing an empty set
    for h in nmap_report.hosts:
        if len(h.os_class_probabilities())>0:
            devices.add(h.os_class_probabilities()[0].description)  
        
        
    h=nmap_report.get_host_byid(first.ipv4)
    #default port info to diplay
    port0=ports[0]
    ips_with_port=[ a.address for a in nmap_report.hosts if (a.get_open_ports()) and port0 in [b[0] for b in a.get_open_ports()] ]
    # previous_port=port
    # previous_host=h
    #to display host data when the user selects an ip or a port
    if(var==0):
        previous_host=h
        previous_port=port0
    if request.method == 'POST':
        if "port_submit" in request.form:
            port=int(request.form.get('port_submit'))
            previous_port=port
            ips_with_port=[ a.address for a in nmap_report.hosts if (a.get_open_ports()) and port in [b[0] for b in a.get_open_ports()] ]
            if(previous_host==0):
                previous_host=h
            return render_template("result.html",report=nmap_report, products=products, ports=ports,host=previous_host,devices=devices,port=previous_port,
    ips_with_port=ips_with_port,title='Scan Results')

        elif "ip_submit" in request.form:    
            ip=request.form.get('ip_submit')
            h=nmap_report.get_host_byid(ip)
            previous_host=h
            if(previous_port==0):
                previous_port=port0
            ips_with_port=[ a.address for a in nmap_report.hosts if (a.get_open_ports()) and previous_port in [b[0] for b in a.get_open_ports()] ]
            return render_template("result.html",report=nmap_report, products=products, ports=ports,host=previous_host,devices=devices,port=previous_port,
    ips_with_port=ips_with_port,title='Scan Results')


    return render_template("result.html",report=nmap_report, products=products, ports=ports,host=h,devices=devices,port=port0,
    ips_with_port=ips_with_port,title='Scan Results')


if __name__=='__main__':
    app.run(debug=True)