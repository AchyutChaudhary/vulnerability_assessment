from flask import Flask, redirect, render_template, request
import subprocess                                           # to run nmap commands in terminal
from libnmap.parser import NmapParser                       # to parse nmap .xml files
from os import listdir                                      # to find all files in a directory (specifically scans directory)
from flask import Blueprint
import json

scanresult_route = Blueprint('scanresult_route', __name__)

previous_port=0
previous_host=0
@scanresult_route.route('/scanresult', methods=["POST"])
def scanresult():

    file = request.form.get('file')
    print('*****************************************')
    print('*****************************************')
    print(file)
    print('*****************************************')
    print('*****************************************')
    #crafting filename
    filename = "scans/"+file+".xml"

    #complete scan report
    #opening the file                           filename
    nmap_report = NmapParser.parse_fromfile(filename)

    #unique products found in the scan
    products=sorted(set([ b.banner for a in nmap_report.hosts for b in a.services if 'product' in b.banner]))

    #unique ports found open on all the hosts combines
    ports=sorted(set([ b[0] for a in nmap_report.hosts for b in a.get_open_ports()]), key=int)

    #distinct devices types
    devices_set= set() #intilazing an empty set
    for h in nmap_report.hosts:
        if len(h.os_class_probabilities())>0:
            devices_set.add(h.os_class_probabilities()[0].description)  

    devices = []
    for device in devices_set:
        devices.append(device)
    
    #filling the hosts arr
    hosts_arr = []
    for h in nmap_report.hosts:
        if h.is_up():
            host = nmap_report.get_host_byid(h.ipv4)

            #finding services
            host_services = []
            for touple in host.get_ports():
                s = host.get_service(touple[0], touple[1])
                host_services.append({
                    'port': touple[0],
                    'tcp_ip': touple[1],
                    'state': s.state,
                    'service': s.service,
                    'banner': s.banner
                })

            
            os = ''
            os_accuracy = ''
            if len(host.os_match_probabilities()) >=1:
                os = host.os_match_probabilities()[0].name
                os_accuracy = host.os_match_probabilities()[0].accuracy

            #compiling final host info
            host_info = {
                'ip': host.ipv4,
                'mac': host.mac,
                'vendor': host.vendor,
                'distance': host.distance,
                'services': host_services,
                'os': os,
                'os_accuracy': os_accuracy
            }

            #appending host_info to hosts_arr
            hosts_arr.append(host_info)

    report_summary = {
        'summary': nmap_report.summary,
        'nmap_version': nmap_report.version,
        'command': nmap_report.commandline,
        'scan_type': nmap_report.scan_type,
    }

    json_dict = {
        'filename': file,
        'report_summary': report_summary,
        'products': products,
        'devices': devices,
        'ports': ports,
        'hosts': hosts_arr
        
    }

    response = json.dumps(json_dict)
    return response