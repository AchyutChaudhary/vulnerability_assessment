from flask import Flask, redirect, render_template, request # flask 
import subprocess                                           # to run nmap commands in terminal
from libnmap.parser import NmapParser                       # to parse nmap .xml files
from os import listdir                                      # to find all files in a directory (specifically scans directory)

from home import home_route
from scan import scan_route

# Configure application
app = Flask(__name__)

#registering blueprints
app.register_blueprint(home_route)
app.register_blueprint(scan_route)

#                                              HOME PAGE
#----------------------------------------------------------------------------------------------------------------------------
# @app.route('/')
# def index():
#     #command = "nmap -sP 172.31.151.90/26;"
#     #my_output = subprocess.check_output(command, shell=True).decode('utf-8')
#     return render_template("index.html",title='Home')
#-----------------------------------------------------------------------------------------------------------------------------


#                                              SCAN
#----------------------------------------------------------------------------------------------------------------------------

# @app.route('/scan', methods=["GET","POST"])
# def scan():
#     if request.method=='POST':

#         #getting all data from the form
#         ip = request.form.get('ip_range') # improve this to filter user input
#         filename = request.form.get('scan_name')
#         comments = request.form.get('comments')
#         scan_type = request.form.get('scan_type')

#         # nmap -oX /Users/achalsaharan/Desktop/tmp.xml -T4 -A -v 172.31.151.90/24   || how a typical command looks

#         # commands dictionary to craft command
#         commands={
#             "intense scan": "-T4 -A -v",
#             "ping scan": "-sn",
#             "quick scan": "-T4 -F",
#             "intense scan, no ping": "-T4 -A -v -Pn",
#             "regular scan": "",
#             "intense scan plus UDP": "-sS -sU -T4 -A -v 172.31.151.90/24",
#             "intense scan, all TCP ports": "-p 1-65535 -T4 -A -v"
#         }

        

#         #crafting command
#         command = "nmap -oX /Users/achalsaharan/capweb/scans/"+filename+".xml"+" "+ commands[scan_type]+" "+ip
#         print(command)

#         #running command using subprocess
#         myoutput=subprocess.check_output(command, shell=True).decode('utf-8')


#         #return render_template("result.html", my_output=myoutput)

#     return render_template("scan.html",title='Scan')
#----------------------------------------------------------------------------------------------------------------------------

#                                                 SCAN RESULT
#----------------------------------------------------------------------------------------------------------------------------
previous_port=0
previous_host=0
@app.route('/scanresult/<int:var>/<string:file>', methods=["GET","POST"])
def scanresult(var, file):
    global previous_port 
    global previous_host

    #crafting filename
    filename = "scans/"+file+".xml"

    #complete scan report
    #opening the file                           filename
    nmap_report = NmapParser.parse_fromfile(filename)

    #unique products found in the scan
    products=sorted(set([ b.banner for a in nmap_report.hosts for b in a.services if 'product' in b.banner]))

    #unique ports found open on all the hosts combines
    ports=sorted(set([ b[0] for a in nmap_report.hosts for b in a.get_open_ports()]), key=int)

    #finding one active host to display initial data
    for first in nmap_report.hosts:
        if first.is_up():
            break

    #distinct devices types
    devices= set() #intilazing an empty set
    for h in nmap_report.hosts:
        if len(h.os_class_probabilities())>0:
            devices.add(h.os_class_probabilities()[0].description)  
        
        
    h=nmap_report.get_host_byid(first.ipv4)
    #default port info to diplay
    port0=ports[0]
    ips_with_port=[ a.address for a in nmap_report.hosts if (a.get_open_ports()) and port0 in [b[0] for b in a.get_open_ports()] ]
    # previous_port=port
    # previous_host=h
    #to display host data when the user selects an ip or a port
    if(var==0):
        previous_host=h
        previous_port=port0
    if request.method == 'POST':
        if "port_submit" in request.form:
            port=int(request.form.get('port_submit'))
            previous_port=port
            ips_with_port=[ a.address for a in nmap_report.hosts if (a.get_open_ports()) and port in [b[0] for b in a.get_open_ports()] ]
            if(previous_host==0):
                previous_host=h
            return render_template("result.html",report=nmap_report, products=products, ports=ports,host=previous_host,devices=devices,port=previous_port,
    ips_with_port=ips_with_port,title='Scan Results', file=file)

        elif "ip_submit" in request.form:    
            ip=request.form.get('ip_submit')
            h=nmap_report.get_host_byid(ip)
            previous_host=h
            if(previous_port==0):
                previous_port=port0
            ips_with_port=[ a.address for a in nmap_report.hosts if (a.get_open_ports()) and previous_port in [b[0] for b in a.get_open_ports()] ]
            return render_template("result.html", report=nmap_report, products=products, ports=ports, host=previous_host, devices=devices, port=previous_port,
    ips_with_port=ips_with_port,title='Scan Results' , file=file)


    return render_template("result.html", report=nmap_report, products=products, ports=ports, host=h, devices=devices, port=port0,
    ips_with_port=ips_with_port, title='Scan Results', file=file)
#----------------------------------------------------------------------------------------------------------------------------

#                                                       ALL SCANS
#----------------------------------------------------------------------------------------------------------------------------
@app.route('/allscans')
def allscans():

    # fetching list of all files in scans directory to display on the website
    #                  change directory as per requirement
    result = listdir('/Users/achalsaharan/capweb/scans')

    # appending all .xml files in files list, important step because the OS add other files containing folder meta data sometimes
    files = []
    for i in range(len(result)):
        if (result[i][-4:] == ".xml" ):
            files.append(result[i])

    #removing the .xml at the end of each file to pass to the template
    for i in range(len(files)):
        files[i] = files[i][:-4]
    

    return render_template('allscans.html', files=files)
#------------------------------------------------------------------------------------------------------------------------------




if __name__=='__main__':
    app.run(debug=True)